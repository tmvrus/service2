// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api.proto

package api

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _api_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on OfferEvent with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *OfferEvent) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	switch m.Event.(type) {

	case *OfferEvent_OfferCreate:

		if v, ok := interface{}(m.GetOfferCreate()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return OfferEventValidationError{
					field:  "OfferCreate",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *OfferEvent_OfferDelete:

		if v, ok := interface{}(m.GetOfferDelete()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return OfferEventValidationError{
					field:  "OfferDelete",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// OfferEventValidationError is the validation error returned by
// OfferEvent.Validate if the designated constraints aren't met.
type OfferEventValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OfferEventValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OfferEventValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OfferEventValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OfferEventValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OfferEventValidationError) ErrorName() string { return "OfferEventValidationError" }

// Error satisfies the builtin error interface
func (e OfferEventValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOfferEvent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OfferEventValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OfferEventValidationError{}

// Validate checks the field values on OfferCreate with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *OfferCreate) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Title

	// no validation rules for AdvertiserId

	// no validation rules for Date

	return nil
}

// OfferCreateValidationError is the validation error returned by
// OfferCreate.Validate if the designated constraints aren't met.
type OfferCreateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OfferCreateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OfferCreateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OfferCreateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OfferCreateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OfferCreateValidationError) ErrorName() string { return "OfferCreateValidationError" }

// Error satisfies the builtin error interface
func (e OfferCreateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOfferCreate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OfferCreateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OfferCreateValidationError{}

// Validate checks the field values on OfferDelete with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *OfferDelete) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Date

	return nil
}

// OfferDeleteValidationError is the validation error returned by
// OfferDelete.Validate if the designated constraints aren't met.
type OfferDeleteValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OfferDeleteValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OfferDeleteValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OfferDeleteValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OfferDeleteValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OfferDeleteValidationError) ErrorName() string { return "OfferDeleteValidationError" }

// Error satisfies the builtin error interface
func (e OfferDeleteValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOfferDelete.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OfferDeleteValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OfferDeleteValidationError{}
